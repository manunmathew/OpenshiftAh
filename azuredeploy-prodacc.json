{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "Base URL for Template Files",
				"artifactsBaseUrl": ""
			},
			"defaultValue": "https://raw.githubusercontent.com/Microsoft/openshift-container-platform/master"
		},
		"masterVmSize": {
			"type": "string",
			"defaultValue": "Standard_E2s_v3",
			"allowedValues": [
				"Standard_A4", "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
				"Standard_D2", "Standard_D3", "Standard_D4",
				"Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
				"Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
				"Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_DS2", "Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5",
				"Standard_D2_v3", "Standard_D4_v3", "Standard_D8_v3", "Standard_D16_v3", "Standard_D32_v3", "Standard_D64_v3",
				"Standard_D2s_v3", "Standard_D4s_v3", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3", "Standard_D64s_v3",
				"Standard_E2_v3", "Standard_E4_v3", "Standard_E8_v3", "Standard_E16_v3", "Standard_E32_v3", "Standard_E64_v3",
				"Standard_E2s_v3", "Standard_E4s_v3", "Standard_E8s_v3", "Standard_E16s_v3", "Standard_E32s_v3", "Standard_E64s_v3"
			],
			"metadata": {
				"description": "OpenShift Master VM size"
			}
		},
		"infraVmSize": {
			"type": "string",
			"defaultValue": "Standard_D4s_v3",
			"allowedValues": [
				"Standard_A4", "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
				"Standard_D2", "Standard_D3", "Standard_D4",
				"Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
				"Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
				"Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_DS2", "Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5",
				"Standard_D2_v3", "Standard_D4_v3", "Standard_D8_v3", "Standard_D16_v3", "Standard_D32_v3", "Standard_D64_v3",
				"Standard_D2s_v3", "Standard_D4s_v3", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3", "Standard_D64s_v3",
				"Standard_E2_v3", "Standard_E4_v3", "Standard_E8_v3", "Standard_E16_v3", "Standard_E32_v3", "Standard_E64_v3",
				"Standard_E2s_v3", "Standard_E4s_v3", "Standard_E8s_v3", "Standard_E16s_v3", "Standard_E32s_v3", "Standard_E64s_v3"
			],
			"metadata": {
				"description": "OpenShift Infra Node VM(s) size"
			}
		},
		"nodeVmSize": {
			"type": "string",
			"defaultValue": "Standard_D4s_v3",
			"allowedValues": [
				"Standard_A4", "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
				"Standard_D2", "Standard_D3", "Standard_D4",
				"Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
				"Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
				"Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_DS2", "Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5",
				"Standard_D2_v3", "Standard_D4_v3", "Standard_D8_v3", "Standard_D16_v3", "Standard_D32_v3", "Standard_D64_v3",
				"Standard_D2s_v3", "Standard_D4s_v3", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3", "Standard_D64s_v3",
				"Standard_E2_v3", "Standard_E4_v3", "Standard_E8_v3", "Standard_E16_v3", "Standard_E32_v3", "Standard_E64_v3",
				"Standard_E2s_v3", "Standard_E4s_v3", "Standard_E8s_v3", "Standard_E16s_v3", "Standard_E32s_v3", "Standard_E64s_v3"
			],
			"metadata": {
				"description": "OpenShift Node VM(s) size"
			}
		},
		"cnsVmSize": {
			"type": "string",
			"defaultValue": "Standard_E4s_v3",
			"allowedValues": [
				"Standard_D4s_v3", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3", "Standard_D64s_v3",
				"Standard_E4s_v3", "Standard_E8s_v3", "Standard_E16s_v3", "Standard_E32s_v3", "Standard_E64s_v3"
			],
			"metadata": {
				"description": "OpenShift CNS Node VM(s) size"
			}
		},
		"osImageType": {
			"type": "string",
			"defaultValue": "defaultgallery",
			"allowedValues": [
				"defaultgallery", "marketplace"
			],
			"metadata": {
				"description": "OpenShift OS image type. 'defaultgallery' will use the on demand RHEL image. 'marketplace' allows you to define a third party marketplace image to use."
			}
		},
		"marketplaceOsImage": {
			"type": "object",
			"defaultValue": {
				"publisher": "redhat",
				"offer": "rhel-byos",
				"sku": "rhel-raw75",
				"version": "7.5.20180917"
			},
			"metadata": {
				"description": "Enter the appropriate publisher, offer, sku and version values for the appropriate marketplace image you want to use."
			}
		},
		"coreInfraCustomTags": {
			"type": "object",
			"defaultValue": {
				"applicationId": "Application ID",
				"applicationName": "OpenShift Container Platform cluster",
				"businessUnitName": "Business Unit",
				"environment": "Environment"
			},
			"metadata": {
				"description": "Custom tags to apply to resources"
			}
		},
		"toolsCustomTags": {
			"type": "object",
			"defaultValue": {
				"applicationId": "Application ID",
				"applicationName": "OpenShift Container Platform cluster",
				"businessUnitName": "Business Unit",
				"environment": "Environment"
			},
			"metadata": {
				"description": "Custom tags to apply to resources"
			}
		},
		"productionCustomTags": {
			"type": "object",
			"defaultValue": {
				"applicationId": "Application ID",
				"applicationName": "OpenShift Container Platform cluster",
				"businessUnitName": "Business Unit",
				"environment": "Environment"
			},
			"metadata": {
				"description": "Custom tags to apply to resources"
			}
		},
		"acceptanceCustomTags": {
			"type": "object",
			"defaultValue": {
				"applicationId": "Application ID",
				"applicationName": "OpenShift Container Platform cluster",
				"businessUnitName": "Business Unit",
				"environment": "Environment"
			},
			"metadata": {
				"description": "Custom tags to apply to resources"
			}
		},
		"storageKind": {
			"type": "string",
			"defaultValue": "managed",
			"allowedValues": ["managed", "unmanaged"],
			"metadata": {
				"description": "Use Managed or Unmanaged Disks"
			}
		},
		"openshiftClusterPrefix": {
			"type": "string",
			"defaultValue": "mycluster",
			"minLength": 4,
			"maxLength": 20,
			"metadata": {
				"description": "OpenShift cluster prefix. Used to generate master, infra and node hostnames. Maximum of 20 characters."
			}
		},
		"openshiftClusterPrefix2": {
			"type": "string",
			"defaultValue": "mycluster",
			"minLength": 4,
			"maxLength": 20,
			"metadata": {
				"description": "OpenShift cluster prefix for compute nodes. Used to generate compute node hostnames. Maximum of 20 characters."
			}
		},
		"minorVersion": {
			"type": "string",
			"defaultValue": "69",
			"metadata": {
				"description": "Minor version of OpenShift 3.11 to deploy"
			}
		},
		"masterInstanceCount": {
			"type": "int",
			"defaultValue": 3,
			"allowedValues": [1, 3, 5],
			"metadata": {
				"description": "Number of OpenShift masters."
			}
		},
		"infraInstanceCount": {
			"type": "int",
			"defaultValue": 3,
			"allowedValues": [1, 2, 3],
			"metadata": {
				"description": "Number of OpenShift infra nodes. 1 is non HA. Choose 2 or 3 for HA"
			}
		},
		"cnsInstanceCount": {
			"type": "int",
			"defaultValue": 4,
			"allowedValues": [3, 4, 5, 6],
			"metadata": {
				"description": "Number of OpenShift cns nodes. 3 is default"
			}
		},
		"acceptanceNodeInstanceCount": {
			"type": "int",
			"defaultValue": 2,
			"allowedValues": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
			"metadata": {
				"description": "Number of OpenShift nodes"
			}
		},
		"productionNodeInstanceCount": {
			"type": "int",
			"defaultValue": 2,
			"allowedValues": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
			"metadata": {
				"description": "Number of OpenShift nodes"
			}
		},
		"toolsNodeInstanceCount": {
			"type": "int",
			"defaultValue": 2,
			"allowedValues": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
			"metadata": {
				"description": "Number of OpenShift nodes"
			}
		},
		"dataDiskSize": {
			"type": "int",
			"defaultValue": 64,
			"allowedValues": [32, 64, 128, 256, 512, 1024, 2048],
			"metadata": {
				"description": "Size of Datadisk in GB for Docker volume"
			}
		},
		"glusterDiskSize": {
			"type": "int",
			"defaultValue": 256,
			"allowedValues": [128, 256, 512, 1024, 2048],
			"metadata": {
				"description": "Size of Datadisk in GB for gluster voluems on CNS nodes"
			}
		},
		"adminUsername": {
			"type": "string",
			"defaultValue": "ocpadmin",
			"minLength": 1,
			"metadata": {
				"description": "Administrator username on all VMs and first user created for OpenShift login"
			}
		},
		"enableMetrics": {
			"type": "string",
			"defaultValue": "false",
			"allowedValues": [
				"true", "false"
			],
			"metadata": {
				"description": "Enable OpenShift Metrics: true or false"
			}
		},
		"enableLogging": {
			"type": "string",
			"defaultValue": "false",
			"allowedValues": [
				"true", "false"
			],
			"metadata": {
				"description": "Enable OpenShift Logging: true or false"
			}
		},
		"enableCNS": {
			"type": "string",
			"defaultValue": "true",
			"allowedValues": [
				"true", "false"
			],
			"metadata": {
				"description": "Enable Container Native Storage: true or false"
			}
		},
		"rhsmUsernameOrOrgIdBroker": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Red Hat Subscription Manager Username or Organization ID. To find your Organization ID, run on registered server: subscription-manager identity"
			}
		},
		"rhsmUsernameOrOrgIdCns": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Red Hat Subscription Manager Username or Organization ID. To find your Organization ID, run on registered server: subscription-manager identity"
			}
		},
		"rhsmUsernameOrOrgIdCompute": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Red Hat Subscription Manager Username or Organization ID. To find your Organization ID, run on registered server: subscription-manager identity"
			}
		},
		"rhsmPoolId1": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Red Hat Subscription Manager Pool ID #1 with OpenShift entitlements for Application Nodes. To find it, run on registered server: subscription-manager list"
			}
		},
		"rhsmPoolId2": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Red Hat Subscription Manager Pool ID #2 with OpenShift entitlements for Application Nodes. To find it, run on registered server: subscription-manager list"
			}
		},
		"rhsmBrokerPoolId": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Red Hat Subscription Manager Pool ID with OpenShift entitlements for Broker / Master Nodes. If not using this, enter the Pool ID for Application Nodes. To find it, run on registered server: subscription-manager list"
			}
		},
		"sshPublicKey": {
			"type": "string",
			"metadata": {
				"description": "SSH public key for all VMs"
			}
		},
		"keyVaultSubscriptionId": {
			"type": "string",
			"metadata": {
				"description": "Subscription ID that contains the Key Vault"
			}
		},
		"keyVaultResourceGroup": {
			"type": "string",
			"metadata": {
				"description": "Resource Group that contains the Key Vault"
			}
		},
		"keyVaultName": {
			"type": "string",
			"metadata": {
				"description": "Name of the Key Vault"
			}
		},
		"enableAzure": {
			"type": "string",
			"defaultValue": "true",
			"allowedValues": [
				"true", "false"
			],
			"metadata": {
				"description": "Enable Azure as Cloud Provider - true or false"
			}
		},
		"aadClientId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Azure AD Client ID"
			}
		},
		"domainName": {
			"type": "string",
			"defaultValue": "contoso.com",
			"metadata": {
				"description": "Domain search name"
			}
		},
		"masterClusterDnsType": {
			"type": "string",
			"defaultValue": "default",
			"allowedValues": [
				"default", "custom"
			],
			"metadata": {
				"description": "Domain type for web console - default (use DNS label of master public IP) or custom (defined in next parameter)"
			}
		},
		"masterClusterDns": {
			"type": "string",
			"defaultValue": "console.contoso.com",
			"metadata": {
				"description": "Custom domain name for access to OpenShift web console. Must be all lowercase"
			}
		},
		"routingSubDomainType": {
			"type": "string",
			"defaultValue": "nipio",
			"allowedValues": [
				"nipio", "custom"
			],
			"metadata": {
				"description": "Default Subdomain type - nip.io or custom (defined in next parameter)"
			}
		},
		"routingSubDomain": {
			"type": "string",
			"defaultValue": "contoso.com",
			"metadata": {
				"description": "Default Subdomain for application routing (Wildcard DNS) - must enter something even if you are using nip.io. Must be all lowercase"
			}
		},
		"virtualNetworkNewOrExisting": {
			"type": "string",
			"defaultValue": "existing",
			"allowedValues": ["new", "existing"],
			"metadata": {
				"description": "Determines whether to provision a new virtual network or use an existing virtual network"
			}
		},
		"virtualNetworkResourceGroupName": {
			"type": "string",
			"defaultValue": "[resourceGroup().name]",
			"metadata": {
			"description": "Name of the resource group for the new virtual network"
			}
		},
		"virtualNetworkName": {
			"type": "string",
			"defaultValue": "openshiftvnet",
			"metadata": {
			"description": "Name of the virtual network that contains master, infra, and cns nodes"
			}
		},
		"addressPrefixes": {
			"type": "string",
			"defaultValue": "10.0.0.0/14",
			"metadata": {
				"description": "Address prefix of the new virtual network"
			}
		},
		"coreInfraVirtualNetworkName": {
			"type": "string",
			"defaultValue": "corevnet",
			"metadata": {
			"description": "Name of the core infrastructure vNet for Master, Infra, CNS, and Tools nodes"
			}
		},
		"coreInfraVirtualNetworkResourceGroup": {
			"type": "string",
			"defaultValue": "corevnetrg",
			"metadata": {
			"description": "Name of the core infrastructure vNet resource group"
			}
		},
		"masterSubnetName": {
			"type": "string",
			"defaultValue": "mastersubnet",
			"metadata": {
			"description": "Name of the subnet for master nodes"
			}
		},
		"masterSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.1.0.0/16",
			"metadata": {
				"description": "CIDR used for the master subnet - needs to be a subset of the addressPrefix - default is 10.1.0.0/16"
			}
		},
		"infraSubnetName": {
			"type": "string",
			"defaultValue": "infrasubnet",
			"metadata": {
			"description": "Name of the subnet for infra nodes"
			}
		},
		"infraSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.2.0.0/16",
			"metadata": {
				"description": "CIDR used for the infra subnet - needs to be a subset of the addressPrefix - default is 10.2.0.0/16"
			}
		},
		"cnsSubnetName": {
			"type": "string",
			"defaultValue": "cnssubnet",
			"metadata": {
				"description": "Name of the subnet for cns nodes"
			}
		},
		"cnsSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.3.0.0/16",
			"metadata": {
				"description": "CIDR used for the cns subnet - needs to be a subset of the addressPrefix - default is 10.3.0.0/16"
			}
		},
		"toolsVirtualNetworkName": {
			"type": "string",
			"defaultValue": "testvnet",
			"metadata": {
			"description": "Name of the vNet for tools nodes"
			}
		},
		"toolsVirtualNetworkResourceGroup": {
			"type": "string",
			"defaultValue": "testvnetrg",
			"metadata": {
			"description": "Name of the tools vNet resource group"
			}
		},
		"toolsSubnetName": {
			"type": "string",
			"defaultValue": "toolssubnet",
			"metadata": {
				"description": "Name of the subnet for tools nodes"
			}
		},
		"toolsSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.4.0.0/16",
			"metadata": {
				"description": "CIDR used for the tools subnet - needs to be a subset of the addressPrefix - default is 10.4.0.0/16"
			}
		},
		"prodVirtualNetworkName": {
			"type": "string",
			"defaultValue": "prodvnet",
			"metadata": {
			"description": "Name of the vNet for production nodes"
			}
		},
		"prodVirtualNetworkResourceGroup": {
			"type": "string",
			"defaultValue": "prodvnetrg",
			"metadata": {
			"description": "Name of the production vNet resource group"
			}
		},
		"prodSubnetName": {
			"type": "string",
			"defaultValue": "prodsubnet",
			"metadata": {
				"description": "Name of the subnet for production nodes"
			}
		},
		"prodSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.5.0.0/16",
			"metadata": {
				"description": "CIDR used for the production subnet - needs to be a subset of the addressPrefix - default is 10.5.0.0/16"
			}
		},
		"accVirtualNetworkName": {
			"type": "string",
			"defaultValue": "accvnet",
			"metadata": {
			"description": "Name of the vNet for acceptance nodes"
			}
		},
		"accVirtualNetworkResourceGroup": {
			"type": "string",
			"defaultValue": "accvnetrg",
			"metadata": {
			"description": "Name of the acceptance vNet resource group"
			}
		},
		"accSubnetName": {
			"type": "string",
			"defaultValue": "accsubnet",
			"metadata": {
				"description": "Name of the subnet for acceptance nodes"
		  }
		},
		"accSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.6.0.0/16",
			"metadata": {
				"description": "CIDR used for the acceptance node subnet - needs to be a subset of the addressPrefix - default is 10.6.0.0/16"
			}
		},
		"masterClusterType": {
			"type": "string",
			"defaultValue": "private",
			"allowedValues": [
				"private", "public"
			],
			"metadata": {
				"description": "Specify whether the cluster uses private or public master nodes"
			}
		},
		"masterPrivateClusterIp": {
			"type": "string",
			"defaultValue": "10.1.0.200",
			"metadata": {
				"description": "Static Private IP address to use for master load balancer when creating a cluster with private master nodes"
			}
		},
		"routerClusterType": {
			"type": "string",
			"defaultValue": "private",
			"allowedValues": [
				"private", "public"
			],
			"metadata": {
				"description": "Specify whether the cluster uses private or public router. Private does not expose router pods to public Internet"
			}
		},
		"routerPrivateClusterIp": {
			"type": "string",
			"defaultValue": "10.2.0.201",
			"metadata": {
				"description": "Static Private IP address to use for infra load balancer when creating a cluster with private infra nodes"
			}
		},
		"routingCertType": {
			"type": "string",
			"defaultValue": "custom",
			"allowedValues": [
				"selfsigned", "custom"
			],
			"metadata": {
				"description": "Use custom certificate for routing domain or the default self-signed certificate"
			}
		},
		"masterCertType": {
			"type": "string",
			"defaultValue": "custom",
			"allowedValues": [
				"selfsigned", "custom"
			],
			"metadata": {
				"description": "Use custom certificate for master domain or the default self-signed certificate"
			}
		},
		"coreinfrastructureResourceGroup": {
			"type": "string",
			"defaultValue": "none",
			"metadata": {
				"description": "Resource group for core infrastructure components"
			}
		},
		"coreinfrastructureSubscriptionID": {
			"type": "string",
			"defaultValue": "none",
			"metadata": {
				"description": "Subscription ID for core infrastructure components"
			}
		},
		"acceptanceNodeGroupResourceGroup": {
			"type": "string",
			"defaultValue": "none",
			"metadata": {
				"description": "Resource group for acceptance node group components"
			}
		},
		"acceptanceNodeGroupSubscriptionID": {
			"type": "string",
			"defaultValue": "none",
			"metadata": {
				"description": "Subscription ID for acceptance node group components"
			}
		},
		"productionNodeGroupResourceGroup": {
			"type": "string",
			"defaultValue": "none",
			"metadata": {
				"description": "Resource group for production node group components"
			}
		},
		"productionNodeGroupSubscriptionID": {
			"type": "string",
			"defaultValue": "none",
			"metadata": {
				"description": "Subscription ID for production node group components"
			}
		},
		"toolsNodeGroupResourceGroup": {
			"type": "string",
			"defaultValue": "none",
			"metadata": {
				"description": "Resource group for tools node group components"
			}
		},
		"toolsNodeGroupSubscriptionID": {
			"type": "string",
			"defaultValue": "none",
			"metadata": {
				"description": "Subscription ID for tools node group components"
			}
		},
		"projectRequestMessage": {
			"type": "string",
			"defaultValue": "none",
			"metadata": {
				"description": "Custom project request message to be inserted into master-config.yaml on all masters"
			}
		}
	},
	"variables": {
		"location": "[resourceGroup().location]",
		"resourceGroupName": "[resourceGroup().name]",
		"tenantId": "[subscription().tenantId]",
		"subscriptionId": "[subscription().subscriptionId]",
		"apiVersionCompute": "2017-03-30",
		"apiVersionNetwork": "2018-04-01",
		"apiVersionStorage": "2018-07-01",
		"apiVersionLinkTemplate": "2017-05-10",
		"routingSubDomain": "[toLower(parameters('routingSubDomain'))]",
		"masterClusterDns": "[toLower(parameters('masterClusterDns'))]",
		"simplifiedClusterPrefix": "[toLower(replace(parameters('openshiftClusterPrefix'),'-', ''))]",
		"simplifiedClusterPrefix2": "[toLower(replace(parameters('openshiftClusterPrefix2'),'-', ''))]",
		"openshiftBastionHostname": "[concat(variables('simplifiedClusterPrefix'), 'ploscb01')]",
		"openshiftMasterHostname": "[concat(variables('simplifiedClusterPrefix'), 'ploscm')]",
		"openshiftInfraHostname": "[concat(variables('simplifiedClusterPrefix'), 'plosci')]",
		"openshiftCnsHostname": "[concat(variables('simplifiedClusterPrefix'), 'ploscc')]",
		"openshiftToolsNodeHostname": "[concat(variables('simplifiedClusterPrefix'), 'plosca')]",
		"openshiftProductionNodeHostname": "[concat(variables('simplifiedClusterPrefix2'), 'plosca')]",
		"openshiftAcceptanceNodeHostname": "[concat(variables('simplifiedClusterPrefix2'), 'alosca')]",
		"diagStorageAccountM": "[concat(variables('simplifiedClusterPrefix'), 'prdsaoscm01')]",
		"diagStorageAccountI": "[concat(variables('simplifiedClusterPrefix'), 'prdsaosci01')]",
		"diagStorageAccountC": "[concat(variables('simplifiedClusterPrefix'), 'prdsaoscc01')]",
		"diagStorageAccountT": "[concat(variables('simplifiedClusterPrefix'), 'prdsaosca01')]",
		"diagStorageAccountP": "[concat(variables('simplifiedClusterPrefix2'), 'prdsaosca01')]",
		"diagStorageAccountA": "[concat(variables('simplifiedClusterPrefix2'), 'accsaosca01')]",
		"newStorageAccountRegistry": "[concat(variables('simplifiedClusterPrefix'), 'prdsaoscr01')]",
		"coreInfraDiagStorageAccountArray": [
			{ "name": "[variables('diagStorageAccountM')]"},
			{ "name": "[variables('diagStorageAccountI')]"},
			{ "name": "[variables('diagStorageAccountC')]"}
		],
		"availabilitySetArray": [
			{ "name": "[concat(parameters('openshiftClusterPrefix'), '-Prd-As-Oscm-01')]", "tagName": "MasterAvailabilitySet" },
			{ "name": "[concat(parameters('openshiftClusterPrefix'), '-Prd-As-Osci-01')]", "tagName": "InfraAvailabilitySet" },
			{ "name": "[concat(parameters('openshiftClusterPrefix'), '-Prd-As-Oscc-01')]", "tagName": "CNSAvailabilitySet" }
		],
		"nodeGroupAvailabilitySetArray": [
			{ "name": "[concat(parameters('openshiftClusterPrefix'), '-Prd-As-Osca-01')]", "tagName": "ToolNodeGroupAvailabilitySet" },
			{ "name": "[concat(parameters('openshiftClusterPrefix2'), '-Prd-As-Osca-01')]", "tagName": "ProductionNodeGroupAvailabilitySet" },
			{ "name": "[concat(parameters('openshiftClusterPrefix2'), '-Acc-As-Osca-01')]", "tagName": "AcceptanceNodeGroupAvailabilitySet" }
		],
		"bastionIp": "[concat(variables('masterFirstAddrPrefix'), add(int(variables('masterFirstAddrOctets4split')[0]),14))]",
		"masterFirstAddrOctets": "[split(parameters('masterSubnetPrefix'),'.')]",
		"masterFirstAddrOctets4split": "[split(variables('masterFirstAddrOctets')[3],'/')]",
		"masterFirstAddrOctet4": "[add(int(variables('masterFirstAddrOctets4split')[0]),5)]",
		"masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0], '.', variables('masterFirstAddrOctets')[1], '.', variables('masterFirstAddrOctets')[2], '.')]",
		"infraFirstAddrOctets": "[split(parameters('infraSubnetPrefix'),'.')]",
		"infraFirstAddrOctets4split": "[split(variables('infraFirstAddrOctets')[3],'/')]",
		"infraFirstAddrOctet4": "[add(int(variables('infraFirstAddrOctets4split')[0]),5)]",
		"infraFirstAddrPrefix": "[concat(variables('infraFirstAddrOctets')[0], '.', variables('infraFirstAddrOctets')[1], '.', variables('infraFirstAddrOctets')[2], '.')]",
		"cnsFirstAddrOctets": "[split(parameters('cnsSubnetPrefix'),'.')]",
		"cnsFirstAddrOctets4split": "[split(variables('cnsFirstAddrOctets')[3],'/')]",
		"cnsFirstAddrOctet4": "[add(int(variables('cnsFirstAddrOctets4split')[0]),4)]",
		"cnsFirstAddrPrefix": "[concat(variables('cnsFirstAddrOctets')[0], '.', variables('cnsFirstAddrOctets')[1], '.', variables('cnsFirstAddrOctets')[2], '.')]",
		"toolsFirstAddrOctets": "[split(parameters('toolsSubnetPrefix'),'.')]",
		"toolsFirstAddrOctets4split": "[split(variables('toolsFirstAddrOctets')[3],'/')]",
		"toolsFirstAddrOctet4": "[add(int(variables('toolsFirstAddrOctets4split')[0]),4)]",
		"toolsFirstAddrPrefix": "[concat(variables('toolsFirstAddrOctets')[0], '.', variables('toolsFirstAddrOctets')[1], '.', variables('toolsFirstAddrOctets')[2], '.')]",
		"prodFirstAddrOctets": "[split(parameters('prodSubnetPrefix'),'.')]",
		"prodFirstAddrOctets4split": "[split(variables('prodFirstAddrOctets')[3],'/')]",
		"prodFirstAddrOctet4": "[add(int(variables('prodFirstAddrOctets4split')[0]),4)]",
		"prodFirstAddrPrefix": "[concat(variables('prodFirstAddrOctets')[0], '.', variables('prodFirstAddrOctets')[1], '.', variables('prodFirstAddrOctets')[2], '.')]",
		"accFirstAddrOctets": "[split(parameters('accSubnetPrefix'),'.')]",
		"accFirstAddrOctets4split": "[split(variables('accFirstAddrOctets')[3],'/')]",
		"accFirstAddrOctet4": "[add(int(variables('accFirstAddrOctets4split')[0]),4)]",
		"accFirstAddrPrefix": "[concat(variables('accFirstAddrOctets')[0], '.', variables('accFirstAddrOctets')[1], '.', variables('accFirstAddrOctets')[2], '.')]",
		"bastionPublicIp": "bastionpublicip",
		"bastionPublicIpDnsLabel": "[concat('bastiondns', uniqueString(resourceGroup().id))]",
		"infraLbPublicIpDnsLabel": "[concat('infradns', uniqueString(concat(resourceGroup().id, 'infra')))]",
		"openshiftMasterPublicIpDnsLabel": "[concat('masterdns', uniqueString(concat(resourceGroup().id, 'master')))]",

		"masterLoadBalancerName": "[concat(parameters('openshiftClusterPrefix'), '-Prd-Lb-Oscm-01')]",
		"masterPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('openshiftMasterPublicIpDnsLabel'))]",
		"masterLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('masterLoadBalancerName'))]",
		"masterLbFrontEndConfigId": "[concat(variables('masterLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
		"masterLbBackendPoolId": "[concat(variables('masterLbId'),'/backendAddressPools/loadBalancerBackend')]",
		"masterLbHttpProbeId": "[concat(variables('masterLbId'),'/probes/httpProbe')]",
		"masterLbHttpsProbeId": "[concat(variables('masterLbId'),'/probes/httpsProbe')]",

		"infraLoadBalancerName": "[concat(parameters('openshiftClusterPrefix'), '-Prd-Lb-Osci-01')]",
		"infraPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('infraLbPublicIpDnsLabel'))]",
		"infraLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('infraLoadBalancerName'))]",
		"infraLbFrontEndConfigId": "[concat(variables('infraLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
		"infraLbBackendPoolId": "[concat(variables('infraLbId'),'/backendAddressPools/loadBalancerBackend')]",
		"infraLbHttpProbeId": "[concat(variables('infraLbId'),'/probes/httpProbe')]",
		"infraLbHttpsProbeId": "[concat(variables('infraLbId'),'/probes/httpsProbe')]",
		
		"privateMasterFrontEndIpConfigurationProperties": {
			"privateIPAddress": "[parameters('masterPrivateClusterIp')]",
			"privateIPAllocationMethod": "Static",
			"subnet": {
				"id": "[resourceId(parameters('coreInfraVirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('coreInfraVirtualNetworkName'), parameters('masterSubnetName'))]"
			}
		},
		"publicMasterFrontEndIpConfigurationProperties": {
			"publicIPAddress": {
				"id": "[variables('masterPublicIpAddressId')]"
			}
		},
		"masterFrontEndIpConfigurationProperties": "[concat(parameters('masterClusterType'), 'MasterFrontEndIpConfigurationProperties')]",
		"privateInfraFrontEndIpConfigurationProperties": {
			"privateIPAddress": "[parameters('routerPrivateClusterIp')]",
			"privateIPAllocationMethod": "Static",
			"subnet": {
				"id": "[resourceId(parameters('coreInfraVirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('coreInfraVirtualNetworkName'), parameters('infraSubnetName'))]"
			}
		},
		"publicInfraFrontEndIpConfigurationProperties": {
			"publicIPAddress": {
				"id": "[variables('infraPublicIpAddressId')]"
			}
		},
		"infraFrontEndIpConfigurationProperties": "[concat(parameters('routerClusterType'), 'InfraFrontEndIpConfigurationProperties')]",
		"imageReference": {
			"publisher": "RedHat",
			"offer": "RHEL",
			"sku": "7.5",
			"version": "latest"
		},
		"marketplacePlan":{
			"publisher": "[parameters('marketplaceOsImage').publisher]",
			"product": "[parameters('marketplaceOsImage').offer]",
			"name": "[parameters('marketplaceOsImage').sku]"
		},
		"bastionVmSize": "Standard_D2s_v3",
		"singlequote": "'",
		"sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
		"bastionPrepScriptUrl": "[concat(parameters('_artifactsLocation'), '/scripts/bastionPrep.sh')]",
		"nodePrepScriptUrl": "[concat(parameters('_artifactsLocation'), '/scripts/nodePrep.sh')]",
		"masterPrepScriptUrl": "[concat(parameters('_artifactsLocation'), '/scripts/masterPrep.sh')]",
		"infraPrepScriptUrl": "[concat(parameters('_artifactsLocation'), '/scripts/infraPrep.sh')]",
		"cnsPrepScriptUrl": "[concat(parameters('_artifactsLocation'), '/scripts/cnsPrep.sh')]",
		"openshiftDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), '/scripts/deployOpenShift.sh')]",
		"bastionPrepScriptFileName": "bastionPrep.sh",
		"nodePrepScriptFileName": "nodePrep.sh",
		"masterPrepScriptFileName": "masterPrep.sh",
		"infraPrepScriptFileName": "infraPrep.sh",
		"cnsPrepScriptFileName": "infraPrep.sh",
		"openshiftDeploymentScriptFileName": "deployOpenShift.sh",
		"clusterNodeDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/clusternode.json')]",
		"clusterCnsNodeDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/clustercnsnode.json')]",
		"basicDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/bastiondeploy.json')]",
		"openshiftDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/openshiftdeploy.json')]",
		"coreInfrastructureDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/coreinfrastructuredeploy.json')]",
		"nodeGroupDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/nodegroupdeploy.json')]",
		"subnetCreateTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/subnetcreate.json')]",
		"bastionPrepTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/bastionprep.json')]",
		"masterPrepTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/masterprep.json')]",
		"infraPrepTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/infraprep.json')]",
		"nodePrepTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/nodeprep.json')]",
		"deployOpenShift": true,
		"vmSizesMap": {
			"Standard_A4": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_A5": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_A6": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_A7": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_A8": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_A9": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_A10": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_A11": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D1": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D2": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D4": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D11": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D12": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D13": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D14": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D1_v2": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D2_v2": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D3_v2": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_D4_v2": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_D5_v2": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_D11_v2": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_D12_v2": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_D13_v2": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_D14_v2": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_G1": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_G2": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_G3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_G4": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_G5": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_DS1": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_DS2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_DS3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_DS4": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_DS11": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_DS12": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_DS13": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_DS14": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_DS1_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_DS2_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_DS3_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_DS4_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_DS5_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_DS11_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_DS12_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_DS13_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_DS14_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_DS15_v2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_GS1": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_GS2": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_GS3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_GS4": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_GS5": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_D2_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_D4_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_D8_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_D16_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_D32_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_D64_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_D2s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_D4s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_D8s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_D16s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_D32s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_D64s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_E2_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "false"
			},
			"Standard_E4_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_E8_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_E16_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_E32_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_E64_v3": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard",
				"acceleratedNetworking": "true"
			},
			"Standard_E2s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "false"
			},
			"Standard_E4s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_E8s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_E16s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_E32s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			},
			"Standard_E64s_v3": {
				"storageAccountType": "Premium_LRS",
				"storageAccountTier": "Premium",
				"acceleratedNetworking": "true"
			}
		}
	},
	"resources": [
		{
			"name": "CoreInfrastructureDeployment",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('coreinfrastructureResourceGroup')]",
            "subscriptionId": "[parameters('coreinfrastructureSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('coreInfrastructureDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionNetwork": {
						"value": "[variables('apiVersionNetwork')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"apiVersionLinkTemplate": {
						"value": "[variables('apiVersionLinkTemplate')]"
					},
					"subnetCreateTemplateUrl": {
						"value": "[variables('subnetCreateTemplateUrl')]"
					},
					"coreInfraDiagStorageAccountArray": {
						"value": "[variables('coreInfraDiagStorageAccountArray')]"
					},
					"newStorageAccountRegistry": {
						"value": "[variables('newStorageAccountRegistry')]"
					},
					"openshiftClusterPrefix": {
						"value": "[concat(parameters('openshiftClusterPrefix'), '-Prd')]"
					},
					"simplifiedClusterPrefix": {
						"value": "[variables('simplifiedClusterPrefix')]"
					},
					"openshiftBastionHostname": {
						"value": "[variables('openshiftBastionHostname')]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"openshiftInfraHostname": {
						"value": "[variables('openshiftInfraHostname')]"
					},
					"openshiftCnsHostname": {
						"value": "[variables('openshiftCnsHostname')]"
					},
					"availabilitySetArray": {
						"value": "[variables('availabilitySetArray')]"
					},
					"masterFirstAddrOctet4": {
						"value": "[variables('masterFirstAddrOctet4')]"
					},
					"masterFirstAddrPrefix": {
						"value": "[variables('masterFirstAddrPrefix')]"
					},
					"infraFirstAddrOctet4": {
						"value": "[variables('infraFirstAddrOctet4')]"
					},
					"infraFirstAddrPrefix": {
						"value": "[variables('infraFirstAddrPrefix')]"
					},
					"cnsFirstAddrOctet4": {
						"value": "[variables('cnsFirstAddrOctet4')]"
					},
					"cnsFirstAddrPrefix": {
						"value": "[variables('cnsFirstAddrPrefix')]"
					},
					"masterClusterType": {
						"value": "[parameters('masterClusterType')]"
					},
					"routerClusterType": {
						"value": "[parameters('routerClusterType')]"
					},
					"masterLoadBalancerName": {
						"value": "[variables('masterLoadBalancerName')]"
					},
					"openshiftMasterPublicIpDnsLabel": {
						"value": "[variables('openshiftMasterPublicIpDnsLabel')]"
					},
					"masterFrontEndIpConfigurationProperties": {
						"value": "[variables(variables('masterFrontEndIpConfigurationProperties'))]"
					},
					"masterLbFrontEndConfigId": {
						"value": "[variables('masterLbFrontEndConfigId')]"
					},
					"masterLbBackendPoolId": {
						"value": "[variables('masterLbBackendPoolId')]"
					},
					"masterLbHttpsProbeId": {
						"value": "[variables('masterLbHttpsProbeId')]"
					},
					"infraLoadBalancerName": {
						"value": "[variables('infraLoadBalancerName')]"
					},
					"infraLbPublicIpDnsLabel": {
						"value": "[variables('infraLbPublicIpDnsLabel')]"
					},
					"infraFrontEndIpConfigurationProperties": {
						"value": "[variables(variables('infraFrontEndIpConfigurationProperties'))]"
					},
					"infraLbFrontEndConfigId": {
						"value": "[variables('infraLbFrontEndConfigId')]"
					},
					"infraLbBackendPoolId": {
						"value": "[variables('infraLbBackendPoolId')]"
					},
					"infraLbHttpProbeId": {
						"value": "[variables('infraLbHttpProbeId')]"
					},
					"infraLbHttpsProbeId": {
						"value": "[variables('infraLbHttpsProbeId')]"
					},
					"bastionIp": {
						"value": "[variables('bastionIp')]"
					},
					"bastionPublicIp": {
						"value": "[variables('bastionPublicIp')]"
					},
					"bastionPublicIpDnsLabel": {
						"value": "[variables('bastionPublicIpDnsLabel')]"
					},
					"enableBastionAcceleratedNetworking": {
						"value": "[if(equals(variables('vmSizesMap')[variables('bastionVmSize')].acceleratedNetworking, 'true'), 'true', 'false')]"
					},
					"enableMasterAcceleratedNetworking": {
						"value": "[if(equals(variables('vmSizesMap')[parameters('masterVmSize')].acceleratedNetworking, 'true'), 'true', 'false')]"
					},
					"enableInfraAcceleratedNetworking": {
						"value": "[if(equals(variables('vmSizesMap')[parameters('infraVmSize')].acceleratedNetworking, 'true'), 'true', 'false')]"
					},
					"enableCnsAcceleratedNetworking": {
						"value": "[if(equals(variables('vmSizesMap')[parameters('cnsVmSize')].acceleratedNetworking, 'true'), 'true', 'false')]"
					},
					"coreInfraVirtualNetworkResourceGroup": {
						"value": "[parameters('coreInfraVirtualNetworkResourceGroup')]"
					},
					"coreInfraVirtualNetworkName": {
						"value": "[parameters('coreInfraVirtualNetworkName')]"
					},
					"masterSubnetName": {
						"value": "[parameters('masterSubnetName')]"
					},
					"masterSubnetPrefix": {
						"value": "[parameters('masterSubnetPrefix')]"
					},
					"infraSubnetName": {
						"value": "[parameters('infraSubnetName')]"
					},
					"infraSubnetPrefix": {
						"value": "[parameters('infraSubnetPrefix')]"
					},
					"cnsSubnetName": {
						"value": "[parameters('cnsSubnetName')]"
					},
					"cnsSubnetPrefix": {
						"value": "[parameters('cnsSubnetPrefix')]"
					},
					"toolsSubnetPrefix": {
						"value": "[parameters('toolsSubnetPrefix')]"
					},
					"prodtestSubnetPrefix": {
						"value": "[parameters('prodSubnetPrefix')]"
					},
					"accdevSubnetPrefix": {
						"value": "[parameters('accSubnetPrefix')]"
					},
					"masterInstanceCount": {
						"value": "[parameters('masterInstanceCount')]"
					},
					"infraInstanceCount": {
						"value": "[parameters('infraInstanceCount')]"
					},
					"cnsInstanceCount": {
						"value": "[parameters('cnsInstanceCount')]"
					},
					"nameSuffix": {
						"value": "01"
					},
					"hostSuffix": {
						"value": "0"
					},
					"customTags": {
						"value": "[parameters('coreInfraCustomTags')]"
					}
				}
			}
		}, {
			"name": "ToolsNodeGroupDeployment",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('toolsNodeGroupResourceGroup')]",
            "subscriptionId": "[parameters('toolsNodeGroupSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"CoreInfrastructureDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nodeGroupDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionNetwork": {
						"value": "[variables('apiVersionNetwork')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"apiVersionLinkTemplate": {
						"value": "[variables('apiVersionLinkTemplate')]"
					},
					"subnetCreateTemplateUrl": {
						"value": "[variables('subnetCreateTemplateUrl')]"
					},
					"openshiftClusterPrefix": {
						"value": "[concat(parameters('openshiftClusterPrefix'), '-Prd')]"
					},
					"simplifiedClusterPrefix": {
						"value": "[variables('simplifiedClusterPrefix')]"
					},
					"openshiftNodeHostname": {
						"value": "[variables('openshiftToolsNodeHostname')]"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccountT')]"
					},
					"availabilitySetName": {
						"value": "[variables('nodeGroupAvailabilitySetArray')[0].name]"
					},
					"virtualNetworkResourceGroupName": {
						"value": "[parameters('toolsVirtualNetworkResourceGroup')]"
					},
					"existingVnetName": {
						"value": "[parameters('toolsVirtualNetworkName')]"
					},
					"subnetName": {
						"value": "[parameters('toolsSubnetName')]"
					},
					"subnetPrefix": {
						"value": "[parameters('toolsSubnetPrefix')]"
					},
					"masterSubnetPrefix": {
						"value": "[parameters('masterSubnetPrefix')]"
					},
					"infraSubnetPrefix": {
						"value": "[parameters('infraSubnetPrefix')]"
					},
					"cnsSubnetPrefix": {
						"value": "[parameters('cnsSubnetPrefix')]"
					},
					"nodeFirstAddrOctet4": {
						"value": "[variables('toolsFirstAddrOctet4')]"
					},
					"nodeFirstAddrPrefix": {
						"value": "[variables('toolsFirstAddrPrefix')]"
					},
					"enableNodeAcceleratedNetworking": {
						"value": "[if(equals(variables('vmSizesMap')[parameters('nodeVmSize')].acceleratedNetworking, 'true'), 'true', 'false')]"
					},
					"nodeInstanceCount": {
						"value": "[parameters('toolsNodeInstanceCount')]"
					},
					"nameSuffix": {
						"value": "01"
					},
					"hostSuffix": {
						"value": "0"
					},
					"customTags": {
						"value": "[parameters('toolsCustomTags')]"
					}
				}
			}
		}, {
			"name": "ProductionNodeGroupDeployment",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('productionNodeGroupResourceGroup')]",
            "subscriptionId": "[parameters('productionNodeGroupSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nodeGroupDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionNetwork": {
						"value": "[variables('apiVersionNetwork')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"apiVersionLinkTemplate": {
						"value": "[variables('apiVersionLinkTemplate')]"
					},
					"subnetCreateTemplateUrl": {
						"value": "[variables('subnetCreateTemplateUrl')]"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccountP')]"
					},
					"openshiftClusterPrefix": {
						"value": "[concat(parameters('openshiftClusterPrefix2'), '-Prd')]"
					},
					"simplifiedClusterPrefix": {
						"value": "[variables('simplifiedClusterPrefix2')]"
					},
					"openshiftNodeHostname": {
						"value": "[variables('openshiftProductionNodeHostname')]"
					},
					"availabilitySetName": {
						"value": "[variables('nodeGroupAvailabilitySetArray')[1].name]"
					},
					"virtualNetworkResourceGroupName": {
						"value": "[parameters('prodVirtualNetworkResourceGroup')]"
					},
					"existingVnetName": {
						"value": "[parameters('prodVirtualNetworkName')]"
					},
					"subnetName": {
						"value": "[parameters('prodSubnetName')]"
					},
					"subnetPrefix": {
						"value": "[parameters('prodSubnetPrefix')]"
					},
					"masterSubnetPrefix": {
						"value": "[parameters('masterSubnetPrefix')]"
					},
					"infraSubnetPrefix": {
						"value": "[parameters('infraSubnetPrefix')]"
					},
					"cnsSubnetPrefix": {
						"value": "[parameters('cnsSubnetPrefix')]"
					},
					"nodeFirstAddrOctet4": {
						"value": "[variables('prodFirstAddrOctet4')]"
					},
					"nodeFirstAddrPrefix": {
						"value": "[variables('prodFirstAddrPrefix')]"
					},
					"enableNodeAcceleratedNetworking": {
						"value": "[if(equals(variables('vmSizesMap')[parameters('nodeVmSize')].acceleratedNetworking, 'true'), 'true', 'false')]"
					},
					"nodeInstanceCount": {
						"value": "[parameters('productionNodeInstanceCount')]"
					},
					"nameSuffix": {
						"value": "01"
					},
					"hostSuffix": {
						"value": "0"
					},
					"customTags": {
						"value": "[parameters('productionCustomTags')]"
					}
				}
			}
		}, {
			"name": "AcceptanceNodeGroupDeployment",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('acceptanceNodeGroupResourceGroup')]",
            "subscriptionId": "[parameters('acceptanceNodeGroupSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nodeGroupDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionNetwork": {
						"value": "[variables('apiVersionNetwork')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"apiVersionLinkTemplate": {
						"value": "[variables('apiVersionLinkTemplate')]"
					},
					"subnetCreateTemplateUrl": {
						"value": "[variables('subnetCreateTemplateUrl')]"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccountA')]"
					},
					"openshiftClusterPrefix": {
						"value": "[concat(parameters('openshiftClusterPrefix2'), '-Acc')]"
					},
					"simplifiedClusterPrefix": {
						"value": "[variables('simplifiedClusterPrefix2')]"
					},
					"openshiftNodeHostname": {
						"value": "[variables('openshiftAcceptanceNodeHostname')]"
					},
					"availabilitySetName": {
						"value": "[variables('nodeGroupAvailabilitySetArray')[2].name]"
					},
					"virtualNetworkResourceGroupName": {
						"value": "[parameters('accVirtualNetworkResourceGroup')]"
					},
					"existingVnetName": {
						"value": "[parameters('accVirtualNetworkName')]"
					},
					"subnetName": {
						"value": "[parameters('accSubnetName')]"
					},
					"subnetPrefix": {
						"value": "[parameters('accSubnetPrefix')]"
					},
					"masterSubnetPrefix": {
						"value": "[parameters('masterSubnetPrefix')]"
					},
					"infraSubnetPrefix": {
						"value": "[parameters('infraSubnetPrefix')]"
					},
					"cnsSubnetPrefix": {
						"value": "[parameters('cnsSubnetPrefix')]"
					},
					"nodeFirstAddrOctet4": {
						"value": "[variables('accFirstAddrOctet4')]"
					},
					"nodeFirstAddrPrefix": {
						"value": "[variables('accFirstAddrPrefix')]"
					},
					"enableNodeAcceleratedNetworking": {
						"value": "[if(equals(variables('vmSizesMap')[parameters('nodeVmSize')].acceleratedNetworking, 'true'), 'true', 'false')]"
					},
					"nodeInstanceCount": {
						"value": "[parameters('acceptanceNodeInstanceCount')]"
					},
					"nameSuffix": {
						"value": "01"
					},
					"hostSuffix": {
						"value": "0"
					},
					"customTags": {
						"value": "[parameters('acceptanceCustomTags')]"
					}
				}
			}
		}, {
			"name": "bastionVmDeployment",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('coreinfrastructureResourceGroup')]",
            "subscriptionId": "[parameters('coreinfrastructureSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"CoreInfrastructureDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('basicDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[variables('bastionVmSize')]"
					},
					"osImageType": {
						"value": "[parameters('osImageType')]"
					},
					"marketplaceOsImage": {
						"value": "[parameters('marketplaceOsImage')]"
					},
					"marketplacePlan": {
						"value": "[variables('marketplacePlan')]"
					},
					"hostName": {
						"value": "[variables('openshiftBastionHostname')]"
					},
					"networkInterfaceName": {
						"value": "[concat(variables('openshiftBastionHostname'), '-nic-01')]"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[variables('bastionVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"diagStorageAccountUri": {
						"value": "[reference('CoreInfrastructureDeployment').outputs.storageUriMaster.value]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"customTags": {
						"value": "[parameters('coreInfraCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('masterVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('coreinfrastructureResourceGroup')]",
            "subscriptionId": "[parameters('coreinfrastructureSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"CoreInfrastructureDeployment"
			],
			"copy": {
				"name": "masterVmLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('masterVmSize')]"
					},
					"osImageType": {
						"value": "[parameters('osImageType')]"
					},
					"marketplaceOsImage": {
						"value": "[parameters('marketplaceOsImage')]"
					},
					"marketplacePlan": {
						"value": "[variables('marketplacePlan')]"
					},
					"availabilitySet": {
						"value": "[variables('availabilitySetArray')[0].name]"
					},
					"hostName": {
						"value": "[concat(variables('openshiftMasterHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"networkInterfaceName": {
						"value": "[concat(variables('openshiftMasterHostname'), padLeft(add(copyIndex(), 1), 2, '0'), '-nic-01')]"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[parameters('masterVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"diagStorageAccountUri": {
						"value": "[reference('CoreInfrastructureDeployment').outputs.storageUriMaster.value]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"customTags": {
						"value": "[parameters('coreInfraCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('infraVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('coreinfrastructureResourceGroup')]",
            "subscriptionId": "[parameters('coreinfrastructureSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"CoreInfrastructureDeployment"
			],
			"copy": {
				"name": "infraVmLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('infraVmSize')]"
					},
					"osImageType": {
						"value": "[parameters('osImageType')]"
					},
					"marketplaceOsImage": {
						"value": "[parameters('marketplaceOsImage')]"
					},
					"marketplacePlan": {
						"value": "[variables('marketplacePlan')]"
					},
					"availabilitySet": {
						"value": "[variables('availabilitySetArray')[1].name]"
					},
					"hostName": {
						"value": "[concat(variables('openshiftInfraHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"networkInterfaceName": {
						"value": "[concat(variables('openshiftInfraHostname'), padLeft(add(copyIndex(), 1), 2, '0'), '-nic-01')]"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[parameters('infraVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"diagStorageAccountUri": {
						"value": "[reference('CoreInfrastructureDeployment').outputs.storageUriInfra.value]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"customTags": {
						"value": "[parameters('coreInfraCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('cnsVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('coreinfrastructureResourceGroup')]",
            "subscriptionId": "[parameters('coreinfrastructureSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"CoreInfrastructureDeployment"
			],
			"copy": {
				"name": "cnsVmLoop",
				"count": "[parameters('cnsInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterCnsNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"glusterDiskSize": {
						"value": "[parameters('glusterDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('cnsVmSize')]"
					},
					"osImageType": {
						"value": "[parameters('osImageType')]"
					},
					"marketplaceOsImage": {
						"value": "[parameters('marketplaceOsImage')]"
					},
					"marketplacePlan": {
						"value": "[variables('marketplacePlan')]"
					},
					"availabilitySet": {
						"value": "[variables('availabilitySetArray')[2].name]"
					},
					"hostName": {
						"value": "[concat(variables('openshiftCnsHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"networkInterfaceName": {
						"value": "[concat(variables('openshiftCnsHostname'), padLeft(add(copyIndex(), 1), 2, '0'), '-nic-01')]"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[parameters('cnsVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"diagStorageAccountUri": {
						"value": "[reference('CoreInfrastructureDeployment').outputs.storageUriCns.value]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"customTags": {
						"value": "[parameters('coreInfraCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('toolsNodeGroupVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('toolsNodeGroupResourceGroup')]",
            "subscriptionId": "[parameters('toolsNodeGroupSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"ToolsNodeGroupDeployment"
			],
			"copy": {
				"name": "toolsNodeGroupVmLoop",
				"count": "[parameters('toolsNodeInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('nodeVmSize')]"
					},
					"osImageType": {
						"value": "[parameters('osImageType')]"
					},
					"marketplaceOsImage": {
						"value": "[parameters('marketplaceOsImage')]"
					},
					"marketplacePlan": {
						"value": "[variables('marketplacePlan')]"
					},
					"availabilitySet": {
						"value": "[variables('nodeGroupAvailabilitySetArray')[0].name]"
					},
					"hostName": {
						"value": "[concat(variables('openshiftToolsNodeHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"networkInterfaceName": {
						"value": "[concat(variables('openshiftToolsNodeHostname'), padLeft(add(copyIndex(), 1), 2, '0'), '-nic-01')]"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[parameters('nodeVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"diagStorageAccountUri": {
						"value": "[reference('ToolsNodeGroupDeployment').outputs.storageUri.value]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"customTags": {
						"value": "[parameters('toolsCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('productionNodeGroupVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('productionNodeGroupResourceGroup')]",
            "subscriptionId": "[parameters('productionNodeGroupSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"ProductionNodeGroupDeployment"
			],
			"copy": {
				"name": "productionNodeGroupVmLoop",
				"count": "[parameters('productionNodeInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('nodeVmSize')]"
					},
					"osImageType": {
						"value": "[parameters('osImageType')]"
					},
					"marketplaceOsImage": {
						"value": "[parameters('marketplaceOsImage')]"
					},
					"marketplacePlan": {
						"value": "[variables('marketplacePlan')]"
					},
					"availabilitySet": {
						"value": "[variables('nodeGroupAvailabilitySetArray')[1].name]"
					},
					"hostName": {
						"value": "[concat(variables('openshiftProductionNodeHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"networkInterfaceName": {
						"value": "[concat(variables('openshiftProductionNodeHostname'), padLeft(add(copyIndex(), 1), 2, '0'), '-nic-01')]"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[parameters('nodeVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"diagStorageAccountUri": {
						"value": "[reference('ProductionNodeGroupDeployment').outputs.storageUri.value]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"customTags": {
						"value": "[parameters('productionCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('acceptanceNodeGroupVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('acceptanceNodeGroupResourceGroup')]",
            "subscriptionId": "[parameters('acceptanceNodeGroupSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"AcceptanceNodeGroupDeployment"
			],
			"copy": {
				"name": "acceptanceNodeGroupVmLoop",
				"count": "[parameters('acceptanceNodeInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('nodeVmSize')]"
					},
					"osImageType": {
						"value": "[parameters('osImageType')]"
					},
					"marketplaceOsImage": {
						"value": "[parameters('marketplaceOsImage')]"
					},
					"marketplacePlan": {
						"value": "[variables('marketplacePlan')]"
					},
					"availabilitySet": {
						"value": "[variables('nodeGroupAvailabilitySetArray')[2].name]"
					},
					"hostName": {
						"value": "[concat(variables('openshiftAcceptanceNodeHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"networkInterfaceName": {
						"value": "[concat(variables('openshiftAcceptanceNodeHostname'), padLeft(add(copyIndex(), 1), 2, '0'), '-nic-01')]"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[parameters('nodeVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"diagStorageAccountUri": {
						"value": "[reference('AcceptanceNodeGroupDeployment').outputs.storageUri.value]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"customTags": {
						"value": "[parameters('acceptanceCustomTags')]"
					}
				}
			}
		}, {
			"name": "bastionPrep",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('coreinfrastructureResourceGroup')]",
            "subscriptionId": "[parameters('coreinfrastructureSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"bastionVmDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('bastionPrepTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"bastionPrepScriptUrl": {
						"value": "[variables('bastionPrepScriptUrl')]"
					},
					"bastionPrepScriptFileName": {
						"value": "[variables('bastionPrepScriptFileName')]"
					},
					"openshiftBastionHostname": {
						"value": "[variables('openshiftBastionHostname')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"domainName": {
						"value": "[parameters('domainName')]"
					},
					"rhsmUsernameOrOrgId": {
						"value": "[parameters('rhsmUsernameOrOrgIdBroker')]"
					},
					"rhsmPasswordOrActivationKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "activationKeyBroker"
						}
					},
					"rhsmPoolId": {
						"value": "[parameters('rhsmBrokerPoolId')]"
					},
					"sshPrivateKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "sshPrivateKey"
						}
					},
					"routingCertType": {
						"value": "[parameters('routingCertType')]"
					},
					"masterCertType": {
						"value": "[parameters('masterCertType')]"
					},
					"customRoutingCaFile": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "[if(equals(parameters('routingCertType'),'custom'), 'routingcafile', 'sshPrivateKey')]"
						}
					},
					"customRoutingCertFile": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "[if(equals(parameters('routingCertType'),'custom'), 'routingcertfile', 'sshPrivateKey')]"
						}
					},
					"customRoutingKeyFile": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "[if(equals(parameters('routingCertType'),'custom'), 'routingkeyfile', 'sshPrivateKey')]"
						}
					},
					"customMasterCaFile": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "[if(equals(parameters('masterCertType'),'custom'), 'mastercafile', 'sshPrivateKey')]"
						}
					},
					"customMasterCertFile": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "[if(equals(parameters('masterCertType'),'custom'), 'mastercertfile', 'sshPrivateKey')]"
						}
					},
					"customMasterKeyFile": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "[if(equals(parameters('masterCertType'),'custom'), 'masterkeyfile', 'sshPrivateKey')]"
						}
					},
					"minorVersion": {
						"value": "[parameters('minorVersion')]"
					},
					"customTags": {
						"value": "[parameters('coreInfraCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('MasterPrep', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('coreinfrastructureResourceGroup')]",
            "subscriptionId": "[parameters('coreinfrastructureSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"[concat('masterVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]"
			],
			"copy": {
				"name": "masterPrepLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('masterPrepTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"masterPrepScriptUrl": {
						"value": "[variables('masterPrepScriptUrl')]"
					},
					"masterPrepScriptFileName": {
						"value": "[variables('masterPrepScriptFileName')]"
					},
					"openshiftMasterHostname": {
						"value": "[concat(variables('openshiftMasterHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"rhsmUsernameOrOrgId": {
						"value": "[parameters('rhsmUsernameOrOrgIdBroker')]"
					},
					"rhsmPasswordOrActivationKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "activationKeyBroker"
						}
					},
					"rhsmPoolId": {
						"value": "[parameters('rhsmBrokerPoolId')]"
					},
					"customTags": {
						"value": "[parameters('coreInfraCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('InfraPrep', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('coreinfrastructureResourceGroup')]",
            "subscriptionId": "[parameters('coreinfrastructureSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"[concat('infraVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]"
			],
			"copy": {
				"name": "infraPrepLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('infraPrepTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"nodePrepScriptUrl": {
						"value": "[variables('infraPrepScriptUrl')]"
					},
					"nodePrepScriptFileName": {
						"value": "[variables('infraPrepScriptFileName')]"
					},
					"openshiftNodeHostname": {
						"value": "[concat(variables('openshiftInfraHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"rhsmUsernameOrOrgId": {
						"value": "[parameters('rhsmUsernameOrOrgIdBroker')]"
					},
					"rhsmPasswordOrActivationKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "activationKeyBroker"
						}
					},
					"rhsmPoolId": {
						"value": "[parameters('rhsmBrokerPoolId')]"
					},
					"customTags": {
						"value": "[parameters('coreInfraCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('CNSPrep', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('coreinfrastructureResourceGroup')]",
            "subscriptionId": "[parameters('coreinfrastructureSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"[concat('cnsVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]"
			],
			"copy": {
				"name": "cnsPrepLoop",
				"count": "[parameters('cnsInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nodePrepTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"nodePrepScriptUrl": {
						"value": "[variables('cnsPrepScriptUrl')]"
					},
					"nodePrepScriptFileName": {
						"value": "[variables('cnsPrepScriptFileName')]"
					},
					"openshiftNodeHostname": {
						"value": "[concat(variables('openshiftCnsHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"rhsmUsernameOrOrgId": {
						"value": "[parameters('rhsmUsernameOrOrgIdCns')]"
					},
					"rhsmPasswordOrActivationKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "activationKeyCns"
						}
					},
					"rhsmPoolId1": {
						"value": "[parameters('rhsmPoolId1')]"
					},
					"rhsmPoolId2": {
						"value": "[parameters('rhsmPoolId2')]"
					},
					"customTags": {
						"value": "[parameters('coreInfraCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('ToolsNodeGroupPrep', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('toolsNodeGroupResourceGroup')]",
            "subscriptionId": "[parameters('toolsNodeGroupSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"[concat('toolsNodeGroupVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]"
			],
			"copy": {
				"name": "toolsNodeGroupPrepLoop",
				"count": "[parameters('toolsNodeInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nodePrepTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"nodePrepScriptUrl": {
						"value": "[variables('nodePrepScriptUrl')]"
					},
					"nodePrepScriptFileName": {
						"value": "[variables('nodePrepScriptFileName')]"
					},
					"openshiftNodeHostname": {
						"value": "[concat(variables('openshiftToolsNodeHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"rhsmUsernameOrOrgId": {
						"value": "[parameters('rhsmUsernameOrOrgIdCompute')]"
					},
					"rhsmPasswordOrActivationKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "activationKeyCompute"
						}
					},
					"rhsmPoolId1": {
						"value": "[parameters('rhsmPoolId1')]"
					},
					"rhsmPoolId2": {
						"value": "[parameters('rhsmPoolId2')]"
					},
					"customTags": {
						"value": "[parameters('toolsCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('ProductionNodeGroupPrep', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('productionNodeGroupResourceGroup')]",
            "subscriptionId": "[parameters('productionNodeGroupSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"[concat('productionNodeGroupVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]"
			],
			"copy": {
				"name": "productionNodeGroupPrepLoop",
				"count": "[parameters('productionNodeInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nodePrepTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"nodePrepScriptUrl": {
						"value": "[variables('nodePrepScriptUrl')]"
					},
					"nodePrepScriptFileName": {
						"value": "[variables('nodePrepScriptFileName')]"
					},
					"openshiftNodeHostname": {
						"value": "[concat(variables('openshiftProductionNodeHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"rhsmUsernameOrOrgId": {
						"value": "[parameters('rhsmUsernameOrOrgIdCompute')]"
					},
					"rhsmPasswordOrActivationKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "activationKeyCompute"
						}
					},
					"rhsmPoolId1": {
						"value": "[parameters('rhsmPoolId1')]"
					},
					"rhsmPoolId2": {
						"value": "[parameters('rhsmPoolId2')]"
					},
					"customTags": {
						"value": "[parameters('productionCustomTags')]"
					}
				}
			}
		}, {
			"name": "[concat('AcceptanceNodeGroupPrep', padLeft(add(copyIndex(), 1), 2, '0'))]",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('acceptanceNodeGroupResourceGroup')]",
            "subscriptionId": "[parameters('acceptanceNodeGroupSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"[concat('acceptanceNodeGroupVmDeployment', padLeft(add(copyIndex(), 1), 2, '0'))]"
			],
			"copy": {
				"name": "acceptanceNodeGroupPrepLoop",
				"count": "[parameters('acceptanceNodeInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nodePrepTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"nodePrepScriptUrl": {
						"value": "[variables('nodePrepScriptUrl')]"
					},
					"nodePrepScriptFileName": {
						"value": "[variables('nodePrepScriptFileName')]"
					},
					"openshiftNodeHostname": {
						"value": "[concat(variables('openshiftAcceptanceNodeHostname'), padLeft(add(copyIndex(), 1), 2, '0'))]"
					},
					"rhsmUsernameOrOrgId": {
						"value": "[parameters('rhsmUsernameOrOrgIdCompute')]"
					},
					"rhsmPasswordOrActivationKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "activationKeyCompute"
						}
					},
					"rhsmPoolId1": {
						"value": "[parameters('rhsmPoolId1')]"
					},
					"rhsmPoolId2": {
						"value": "[parameters('rhsmPoolId2')]"
					},
					"customTags": {
						"value": "[parameters('acceptanceCustomTags')]"
					}
				}
			}
		}, {
			"condition": "[variables('deployOpenShift')]",
			"name": "OpenShiftDeployment",
			"type": "Microsoft.Resources/deployments",
			"resourceGroup": "[parameters('coreinfrastructureResourceGroup')]",
            "subscriptionId": "[parameters('coreinfrastructureSubscriptionID')]",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"bastionPrep",
				"masterPrepLoop",
				"infraPrepLoop",
				"cnsPrepLoop",
				"toolsNodeGroupPrepLoop",
				"productionNodeGroupPrepLoop",
				"acceptanceNodeGroupPrepLoop"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('openshiftDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"tenantId": {
						"value": "[variables('tenantId')]"
					},
					"subscriptionId": {
						"value": "[parameters('coreinfrastructureSubscriptionID')]"
					},
					"resourceGroupName": {
						"value": "[parameters('coreinfrastructureResourceGroup')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"openshiftDeploymentScriptUrl": {
						"value": "[variables('openshiftDeploymentScriptUrl')]"
					},
					"openshiftDeploymentScriptFileName": {
						"value": "[variables('openshiftDeploymentScriptFileName')]"
					},
					"newStorageAccountRegistry": {
						"value": "[variables('newStorageAccountRegistry')]"
					},
					"newStorageAccountRegistryKey": {
						"value": "[reference('CoreInfrastructureDeployment').outputs.registryKey.value]"
					},
					"openshiftBastionHostname": {
						"value": "[variables('openshiftBastionHostname')]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"openshiftMasterPublicIpFqdn": {
						"value": "[if(equals(parameters('masterClusterDnsType'),'default'), reference('CoreInfrastructureDeployment').outputs.masterPublicIpFqdn.value, variables('masterClusterDns'))]"
					},
					"openshiftMasterPublicIpAddress": {
						"value": "[reference('CoreInfrastructureDeployment').outputs.masterPublicIp.value]"
					},
					"openshiftInfraHostname": {
						"value": "[variables('openshiftInfraHostname')]"
					},
					"openshiftCnsHostname": {
						"value": "[variables('openshiftCnsHostname')]"
					},
					"openshiftToolsNodeHostname": {
						"value": "[variables('openshiftToolsNodeHostname')]"
					},
					"openshiftProdTestNodeHostname": {
						"value": "[variables('openshiftProductionNodeHostname')]"
					},
					"openshiftAccDevNodeHostname": {
						"value": "[variables('openshiftAcceptanceNodeHostname')]"
					},
					"masterInstanceCount": {
						"value": "[parameters('masterInstanceCount')]"
					},
					"infraInstanceCount": {
						"value": "[parameters('infraInstanceCount')]"
					},
					"cnsInstanceCount": {
						"value": "[parameters('cnsInstanceCount')]"
					},
					"toolsNodeInstanceCount": {
						"value": "[parameters('toolsNodeInstanceCount')]"
					},
					"prodtestNodeInstanceCount": {
						"value": "[parameters('productionNodeInstanceCount')]"
					},
					"accdevNodeInstanceCount": {
						"value": "[parameters('acceptanceNodeInstanceCount')]"
					},
					"storageKind": {
						"value": "[parameters('storageKind')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"openshiftPassword": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "openshiftPassword"
						}
					},
					"enableCNS": {
						"value": "[parameters('enableCNS')]"
					},
					"enableMetrics": {
						"value": "[parameters('enableMetrics')]"
					},
					"enableLogging": {
						"value": "[parameters('enableLogging')]"
					},
					"enableAzure": {
						"value": "[parameters('enableAzure')]"
					},
					"aadClientId": {
						"value": "[parameters('aadClientId')]"
					},
					"aadClientSecret": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "aadClientSecret"
						}
					},
					"domainName": {
						"value": "[parameters('domainName')]"
					},
					"nipioDomain": {
						"value": "[concat(reference('CoreInfrastructureDeployment').outputs.infraPublicIp.value, '.nip.io')]"
					},
					"customDomain": {
						"value": "[variables('routingSubDomain')]"
					},
					"subDomainChosen": {
						"value": "[concat(parameters('routingSubDomainType'), 'Domain')]"
					},
					"customTags": {
						"value": "[parameters('coreInfraCustomTags')]"
					},
					"hostSuffix": {
						"value": "0"
					},
					"virtualNetworkName": {
						"value": "[parameters('virtualNetworkName')]"
					},
					"nodeNetworkSecurityGroup": {
						"value": "[concat(variables('openshiftInfraHostname'), '-nsg')]"
					},
					"nodeAvailabilitySet": {
						"value": "infraavailabilityset"
					},
					"masterClusterType": {
						"value": "[parameters('masterClusterType')]"
					},
					"masterPrivateClusterIp": {
						"value": "[parameters('masterPrivateClusterIp')]"
					},
					"masterClusterDns": {
						"value": "[variables('masterClusterDns')]"
					},
					"routingCertType": {
						"value": "[parameters('routingCertType')]"
					},
					"masterCertType": {
						"value": "[parameters('masterCertType')]"
					},
					"omsWorkspaceId": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "omsWorkspaceId"
						}
					},
					"omsWorkspaceKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('keyVaultSubscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "omsWorkspaceKey"
						}
					},
					"projectRequestMessage": {
						"value": "[parameters('projectRequestMessage')]"
					},
					"minorVersion": {
						"value": "[parameters('minorVersion')]"
					},
					"clusterType": {
						"value": "prodacc"
					}
				}
			}
		}
	],
	"outputs": {
		"BastionDNSFQDN": {
			"type": "string",
			"value": "hello"
		},
		"OpenshiftConsoleUrl": {
			"type": "string",
			"value": "good bye"
		}
	}
}
